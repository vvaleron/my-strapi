input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Action {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  type: String
  name: String
  published_at: DateTime
}

type ActionConnection {
  values: [Action]
  groupBy: ActionGroupBy
  aggregate: ActionAggregator
}

type ActionAggregator {
  count: Int
  totalCount: Int
}

type ActionGroupBy {
  id: [ActionConnectionId]
  created_at: [ActionConnectionCreated_at]
  updated_at: [ActionConnectionUpdated_at]
  type: [ActionConnectionType]
  name: [ActionConnectionName]
  published_at: [ActionConnectionPublished_at]
}

type ActionConnectionId {
  key: ID
  connection: ActionConnection
}

type ActionConnectionCreated_at {
  key: DateTime
  connection: ActionConnection
}

type ActionConnectionUpdated_at {
  key: DateTime
  connection: ActionConnection
}

type ActionConnectionType {
  key: String
  connection: ActionConnection
}

type ActionConnectionName {
  key: String
  connection: ActionConnection
}

type ActionConnectionPublished_at {
  key: DateTime
  connection: ActionConnection
}

input ActionInput {
  type: String
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editActionInput {
  type: String
  name: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createActionInput {
  data: ActionInput
}

type createActionPayload {
  action: Action
}

input updateActionInput {
  where: InputID
  data: editActionInput
}

type updateActionPayload {
  action: Action
}

input deleteActionInput {
  where: InputID
}

type deleteActionPayload {
  action: Action
}

type Site {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  link: String
  published_at: DateTime
  actions(sort: String, limit: Int, start: Int, where: JSON): [Action]
}

type SiteConnection {
  values: [Site]
  groupBy: SiteGroupBy
  aggregate: SiteAggregator
}

type SiteAggregator {
  count: Int
  totalCount: Int
}

type SiteGroupBy {
  id: [SiteConnectionId]
  created_at: [SiteConnectionCreated_at]
  updated_at: [SiteConnectionUpdated_at]
  name: [SiteConnectionName]
  link: [SiteConnectionLink]
  published_at: [SiteConnectionPublished_at]
}

type SiteConnectionId {
  key: ID
  connection: SiteConnection
}

type SiteConnectionCreated_at {
  key: DateTime
  connection: SiteConnection
}

type SiteConnectionUpdated_at {
  key: DateTime
  connection: SiteConnection
}

type SiteConnectionName {
  key: String
  connection: SiteConnection
}

type SiteConnectionLink {
  key: String
  connection: SiteConnection
}

type SiteConnectionPublished_at {
  key: DateTime
  connection: SiteConnection
}

input SiteInput {
  name: String
  link: String
  actions: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSiteInput {
  name: String
  link: String
  actions: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSiteInput {
  data: SiteInput
}

type createSitePayload {
  site: Site
}

input updateSiteInput {
  where: InputID
  data: editSiteInput
}

type updateSitePayload {
  site: Site
}

input deleteSiteInput {
  where: InputID
}

type deleteSitePayload {
  site: Site
}

type State {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  popup: JSON
  background: JSON
  options: JSON
  ua: String
  published_at: DateTime
}

type StateConnection {
  values: [State]
  groupBy: StateGroupBy
  aggregate: StateAggregator
}

type StateAggregator {
  count: Int
  totalCount: Int
}

type StateGroupBy {
  id: [StateConnectionId]
  created_at: [StateConnectionCreated_at]
  updated_at: [StateConnectionUpdated_at]
  popup: [StateConnectionPopup]
  background: [StateConnectionBackground]
  options: [StateConnectionOptions]
  ua: [StateConnectionUa]
  published_at: [StateConnectionPublished_at]
}

type StateConnectionId {
  key: ID
  connection: StateConnection
}

type StateConnectionCreated_at {
  key: DateTime
  connection: StateConnection
}

type StateConnectionUpdated_at {
  key: DateTime
  connection: StateConnection
}

type StateConnectionPopup {
  key: JSON
  connection: StateConnection
}

type StateConnectionBackground {
  key: JSON
  connection: StateConnection
}

type StateConnectionOptions {
  key: JSON
  connection: StateConnection
}

type StateConnectionUa {
  key: String
  connection: StateConnection
}

type StateConnectionPublished_at {
  key: DateTime
  connection: StateConnection
}

input StateInput {
  popup: JSON
  background: JSON
  options: JSON
  ua: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editStateInput {
  popup: JSON
  background: JSON
  options: JSON
  ua: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createStateInput {
  data: StateInput
}

type createStatePayload {
  state: State
}

input updateStateInput {
  where: InputID
  data: editStateInput
}

type updateStatePayload {
  state: State
}

input deleteStateInput {
  where: InputID
}

type deleteStatePayload {
  state: State
}

type BackupRestoreBackup {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  created_by: AdminUser
  updated_by: AdminUser
}

input BackupInput {
  strapiVersion: String!
  adminVersion: String!
  dbEngine: String
  identifier: String!
  size: String!
  manual: Boolean!
  backupPath: String!
  hasDB: Boolean
  hasUploads: Boolean
  created_by: ID
  updated_by: ID
}

input editBackupInput {
  strapiVersion: String
  adminVersion: String
  dbEngine: String
  identifier: String
  size: String
  manual: Boolean
  backupPath: String
  hasDB: Boolean
  hasUploads: Boolean
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Action | ActionConnection | ActionAggregator | ActionGroupBy | ActionConnectionId | ActionConnectionCreated_at | ActionConnectionUpdated_at | ActionConnectionType | ActionConnectionName | ActionConnectionPublished_at | createActionPayload | updateActionPayload | deleteActionPayload | Site | SiteConnection | SiteAggregator | SiteGroupBy | SiteConnectionId | SiteConnectionCreated_at | SiteConnectionUpdated_at | SiteConnectionName | SiteConnectionLink | SiteConnectionPublished_at | createSitePayload | updateSitePayload | deleteSitePayload | State | StateConnection | StateAggregator | StateGroupBy | StateConnectionId | StateConnectionCreated_at | StateConnectionUpdated_at | StateConnectionPopup | StateConnectionBackground | StateConnectionOptions | StateConnectionUa | StateConnectionPublished_at | createStatePayload | updateStatePayload | deleteStatePayload | BackupRestoreBackup | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  action(id: ID!, publicationState: PublicationState): Action
  actions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Action]
  actionsConnection(sort: String, limit: Int, start: Int, where: JSON): ActionConnection
  site(id: ID!, publicationState: PublicationState): Site
  sites(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Site]
  sitesConnection(sort: String, limit: Int, start: Int, where: JSON): SiteConnection
  state(id: ID!, publicationState: PublicationState): State
  states(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [State]
  statesConnection(sort: String, limit: Int, start: Int, where: JSON): StateConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAction(input: createActionInput): createActionPayload
  updateAction(input: updateActionInput): updateActionPayload
  deleteAction(input: deleteActionInput): deleteActionPayload
  createSite(input: createSiteInput): createSitePayload
  updateSite(input: updateSiteInput): updateSitePayload
  deleteSite(input: deleteSiteInput): deleteSitePayload
  createState(input: createStateInput): createStatePayload
  updateState(input: updateStateInput): updateStatePayload
  deleteState(input: deleteStateInput): deleteStatePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
